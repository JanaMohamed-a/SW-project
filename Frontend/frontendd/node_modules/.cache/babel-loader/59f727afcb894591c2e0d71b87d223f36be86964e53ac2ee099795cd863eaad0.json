{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mariam\\\\Desktop\\\\SW-PROJ\\\\SW-project\\\\Frontend\\\\frontendd\\\\src\\\\components\\\\events\\\\EventList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport EventCard from './EventCard';\nimport { AuthContext } from '../auth/AuthContext';\nimport { fetchEvents } from '../auth/AuthContext'; // Your API function to get events\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventList = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const {\n    fetchEvents\n  } = useContext(AuthContext);\n  useEffect(() => {\n    const loadEvents = async () => {\n      try {\n        const response = await fetchEvents();\n        setEvents(response.data.data); // Adjust if your API response shape is different\n      } catch {\n        setError('Failed to load events.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadEvents();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading events...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 21\n  }, this);\n  if (events.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No events available.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 35\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: events.map(event => /*#__PURE__*/_jsxDEV(EventCard, {\n      event: event\n    }, event._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(EventList, \"QXTfKsZyl9xmDtQTNgGrYm04yVQ=\");\n_c = EventList;\nexport default EventList;\n// This component fetches and displays a list of events using the EventCard component.\nvar _c;\n$RefreshReg$(_c, \"EventList\");","map":{"version":3,"names":["React","useEffect","useState","EventCard","AuthContext","fetchEvents","jsxDEV","_jsxDEV","EventList","_s","events","setEvents","loading","setLoading","error","setError","useContext","loadEvents","response","data","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","event","_id","_c","$RefreshReg$"],"sources":["C:/Users/Mariam/Desktop/SW-PROJ/SW-project/Frontend/frontendd/src/components/events/EventList.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport EventCard from './EventCard';\r\nimport { AuthContext } from '../auth/AuthContext';\r\nimport { fetchEvents } from '../auth/AuthContext';  // Your API function to get events\r\n\r\nconst EventList = () => {\r\n  const [events, setEvents] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n const { fetchEvents } = useContext(AuthContext);\r\n \r\n  useEffect(() => {\r\n    const loadEvents = async () => {\r\n      try {\r\n        const response = await fetchEvents();\r\n        setEvents(response.data.data);  // Adjust if your API response shape is different\r\n      } catch {\r\n        setError('Failed to load events.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    loadEvents();\r\n  }, []);\r\n\r\n  if (loading) return <p>Loading events...</p>;\r\n  if (error) return <p>{error}</p>;\r\n  if (events.length === 0) return <p>No events available.</p>;\r\n\r\n  return (\r\n    <div>\r\n      {events.map(event => (\r\n        <EventCard key={event._id} event={event} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventList;\r\n// This component fetches and displays a list of events using the EventCard component."],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,aAAa;AACnC,SAASC,WAAW,QAAQ,qBAAqB;AACjD,SAASC,WAAW,QAAQ,qBAAqB,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACzC,MAAM;IAAEG;EAAY,CAAC,GAAGW,UAAU,CAACZ,WAAW,CAAC;EAE9CH,SAAS,CAAC,MAAM;IACd,MAAMgB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMb,WAAW,CAAC,CAAC;QACpCM,SAAS,CAACO,QAAQ,CAACC,IAAI,CAACA,IAAI,CAAC,CAAC,CAAE;MAClC,CAAC,CAAC,MAAM;QACNJ,QAAQ,CAAC,wBAAwB,CAAC;MACpC,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IACDI,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIL,OAAO,EAAE,oBAAOL,OAAA;IAAAa,QAAA,EAAG;EAAiB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAC5C,IAAIV,KAAK,EAAE,oBAAOP,OAAA;IAAAa,QAAA,EAAIN;EAAK;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;EAChC,IAAId,MAAM,CAACe,MAAM,KAAK,CAAC,EAAE,oBAAOlB,OAAA;IAAAa,QAAA,EAAG;EAAoB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAE3D,oBACEjB,OAAA;IAAAa,QAAA,EACGV,MAAM,CAACgB,GAAG,CAACC,KAAK,iBACfpB,OAAA,CAACJ,SAAS;MAAiBwB,KAAK,EAAEA;IAAM,GAAxBA,KAAK,CAACC,GAAG;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAiB,CAC3C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACf,EAAA,CA/BID,SAAS;AAAAqB,EAAA,GAATrB,SAAS;AAiCf,eAAeA,SAAS;AACxB;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}